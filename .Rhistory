library(dplyr)
library(lubridate)
# library(lattice)
# library(RCurl)
library(knitr)
library(ggplot2)
library(Cairo)
library(animation)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
ani.options(interval=.6)
data(iris)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
source('~/.active-rstudio-document', echo=TRUE)
?fancyRpartPlot
plot(model)
summary(model)
summary(model)
plot(model, uniform=TRUE,
main="Classification Tree")
plot(model$finalmodel, uniform=TRUE,
main="Classification Tree")
plot(model$finalmodel, uniform=TRUE, main="Classification Tree")
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
plot(model$finalmodel, uniform=TRUE, main="Classification Tree")
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
data(iris)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
shiny::runApp('E:/Brendan/Documents/Education/JohnsHopkins_Crsera/DevDataProducts/Proj_01/Shiny_Portfolio/Application')
shiny::runApp('E:/Brendan/Documents/Education/JohnsHopkins_Crsera/DevDataProducts/Proj_01/Shiny_Portfolio/Application')
shiny::runApp('E:/Brendan/Documents/Education/JohnsHopkins_Crsera/DevDataProducts/Proj_01/Shiny_Portfolio/Application')
shiny::runApp('E:/Brendan/Documents/Education/JohnsHopkins_Crsera/DevDataProducts/Proj_01/Shiny_Portfolio/Application')
shiny::runApp('E:/Brendan/Documents/Education/JohnsHopkins_Crsera/DevDataProducts/Proj_01/Shiny_Portfolio/Application')
devtools::install_github('rstudio/DT')
shiny::runApp('E:/Brendan/Documents/Education/JohnsHopkins_Crsera/DevDataProducts/Proj_01/Shiny_Portfolio/Application')
install.packages("forecast")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
install_github(‘R-package/quandl’)
install_github(‘cran/quandl’)
install_github('cran/quandl')
library("devtools", lib.loc="d:/Program Files/R/R-3.1.2/library")
install_github('cran/quandl')
library(Quandl)
install.packages("Quandl")
source('~/.active-rstudio-document', echo=TRUE)
View(spam)
data(ham)
?kernlab
help.packages(kernlab)
help.package(kernlab)
?help
help(package=kernlab)
?table
prediction <- ifelse(spam$your > 0.5, "spam", "nonspam")
View(prediction)
table(prediction, spam$type)
table(prediction, spam$type) / length(spam$type)
source('E:/Brendan/Documents/Education/JohnsHopkins_Crsera/MachineLearning/Project/ParallelizationBenchMark.R', echo=TRUE)
spam
ncol(spam)
choose(5,3)
install . packages (" XLConnect ")
install.packages ("XLConnect")
library(XLConnect)
help(XLConnect)
java -version
library(xlsx)
java -version
version
library("rhdf5", lib.loc="d:/Program Files/R/R-3.1.2/library")
?POSIXlt
?par
?with''
?with
?gl
?Devices
rep(0:1, each = 50)
pbeta(0.75, 2, 1)
pbeta(c(0.4, 0.5, 0.6), 2, 1)
qbeta(0.5, 2, 1)
devtools::install_github("ropensci/plotly")
library("ggplot2", lib.loc="d:/Program Files/R/R-3.1.2/library")
install.packages(c("animation", "bit64", "boot", "Cairo", "caret", "chron", "class", "cluster", "codetools", "CORElearn", "crayon", "data.table", "devtools", "DiagrammeR", "doParallel", "downloader", "dplyr", "e1071", "ElemStatLearn", "evaluate", "fields", "foreach", "forecast", "foreign", "formatR", "git2r", "googleVis", "highr", "HistData", "Hmisc", "httpuv", "ipred", "iterators", "kernlab", "KernSmooth", "knitr", "lattice", "lava", "lme4", "lubridate", "manipulate", "maps", "MASS", "Matrix", "mboost", "mgcv", "multcomp", "mvtnorm", "nlme", "NLP", "nnet", "partykit", "plotly", "plotrix", "polspline", "prodlim", "psych", "quantmod", "quantreg", "randomForest", "rattle", "RcppArmadillo", "RcppEigen", "RCurl", "rJava", "rmarkdown", "rms", "RMySQL", "roxygen2", "rpart", "rpart.plot", "rversions", "sandwich", "schoRsch", "shiny", "spam", "SparseM", "spatial", "survival", "testthat", "tidyr", "tm", "tree", "TTR", "twitteR", "UsingR", "XML", "xml2", "xtable", "yhatr"))
install.packages('Rcpp')
library(Rcpp)
devtools::install_github("ropensci/plotly")
library(plotly)
p <- plot_ly(midwest, x = percollege, color = state, type = "box")
p
help(plotly)
data(canada.cities, package = "maps")
viz <- ggplot(canada.cities, aes(long, lat)) +
borders(regions = "canada", name = "borders") +
coord_equal() +
geom_point(aes(text = name, size = pop), colour = "red",
alpha = 1/2, name = "cities")
ggplotly(viz)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
d
ggplot2(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
ggplot(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
p
(gg <- ggplotly(p))
gg
library("htmlwidgets", lib.loc="d:/Program Files/R/R-3.1.2/library")
gg
library(leaflet)
pal <- colorQuantile("YlOrRd", NULL, n = 8)
leaflet(orstationc) %>%
addTiles() %>%
addCircleMarkers(color = ~pal(tann))
install.packages("leaflet")
library(leaflet)
pal <- colorQuantile("YlOrRd", NULL, n = 8)
leaflet(orstationc) %>%
addTiles() %>%
addCircleMarkers(color = ~pal(tann))
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
nhtemp
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
install.packages('dygraphs')
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
library(plotly)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
p
ggplotly(p)
midwest
gMe <- ggplot(midwest, x = percollege, color = state, type = "box")
gMe
gMe <- qplot(midwest, x = percollege, color = state, type = "box")
gMe
plot(midwest, x = percollege, color = state, type = "box")
head(midwest)
p
ggplotly(p)
head(economics)
p <- plot_ly(economics, x = date, y = unemploy / pop)
p
help('plotly')
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggiris
ggplotly(ggiris)
p
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
p
(gg <- ggplotly(p))
library(plotly)
library(ggplot2)
midwest
d <- diamonds[sample(nrow(diamonds), 1000), ]
mode = "markers", color = carat, size = carat)
ggplot2(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
ggplot(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
p
(gg <- ggplotly(p))
library(plotly)
library(ggplot2)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
p
(gg <- ggplotly(p))
devtools::session_info()
help('plotly')
4
find_rtools()
devtools::install_github("pablobarbera/instaR/instaR")
app_id <- "6bc0dc1ef85743bfaa1fb26bdbb4ccc5"
app_secret <- "eac3197e22e049db8e546520207d9aa4"
token <- instaOAuth(app_id, app_secret)
library(instaR)
app_id <- "6bc0dc1ef85743bfaa1fb26bdbb4ccc5"
app_secret <- "eac3197e22e049db8e546520207d9aa4"
token <- instaOAuth(app_id, app_secret)
library(curl)
library("curl", lib.loc="d:/Program Files/R/R-3.1.2/library")
obama <- searchInstagram("obama", token, n=100, folder="obama")
load("~/Dropbox/credentials/instagram/insta_token")
tsq <- searchInstagram(lat=40.7577, lng=-73.9857, distance=500,
token=token, n=500, folder="timessquare", mindate="2015-01-01", maxdate="2015-01-03")
token <- instaOAuth(app_id, app_secret)
getFollowers(academyofhawaiianarts, token, userid = NULL, verbose = TRUE)
getFollowers(academyofhawaiianarts, token, userid = NULL, verbose = TRUE)
token <- instaOAuth(app_id, app_secret, scope="public_content")
getFollowers(academyofhawaiianarts, token, userid = NULL, verbose = TRUE)
getFollowers(academyofhawaiianarts, token, userid = NULL, verbose = TRUE)
getFollowers(academyofhawaiianarts, token, userid = NULL, verbose = TRUE)
wh <- getUserMedia("whitehouse", token, n=10, folder="WH_pics")
getFollowers("academyofhawaiianarts", token, userid = NULL, verbose = TRUE)
getFollowers("academyofhawaiianarts", token, userid = NULL, verbose = TRUE)
token <- instaOAuth(app_id, app_secret, scope="public_content")
getFollowers("academyofhawaiianarts", token, userid = NULL, verbose = TRUE)
token
app_id
app_secret
getFollowers("academyofhawaiianarts", instaOAuth(app_id, app_secret, scope="public_content"), userid = NULL, verbose = TRUE)
library(curl)
install.packages("curl")
library(instaR), library(curl)
library(instaR); library(curl)
app_id <- "6bc0dc1ef85743bfaa1fb26bdbb4ccc5"
app_secret <- "eac3197e22e049db8e546520207d9aa4"
token <- instaOAuth(app_id, app_secret, scope="public_content")
getFollowers("academyofhawaiianarts", instaOAuth(app_id, app_secret, scope="public_content"), userid = NULL, verbose = TRUE)
library(curl)
install.packages("curl")
library(curl)
getFollowers("academyofhawaiianarts", instaOAuth(app_id, app_secret, scope="public_content"), userid = NULL, verbose = TRUE)
token
token <- instaOAuth(app_id, app_secret, scope="public_content")
obama <- searchInstagram("obama", token, n=10, folder="obama")
getFollowers("academyofhawaiianarts", token, userid = NULL, verbose = TRUE)
euromaidan <- searchInstagram("euromaidan", token, n=10, folder="euromaidan")
tsq <- searchInstagram(lat=40.7577, lng=-73.9857, distance=500,
token=token, n=5, folder="timessquare")
obama <- searchInstagram("obama", token, n=10, folder="obama")
library(instaR); library(curl)
app_id <- "6bc0dc1ef85743bfaa1fb26bdbb4ccc5"
app_secret <- "eac3197e22e049db8e546520207d9aa4"
getFollowers("academyofhawaiianarts", token, userid = NULL, verbose = TRUE)
obama <- searchInstagram("obama", token, n=10, folder="obama")
mccain <- getFollowers("senjohnmccain", token)
tag_count <- getTagCount("obama", token)
obama_info <- getUser("obama", token)
AHA_info <- getUser("academyofhawaiianarts", token)
View(AHA_info)
AHA_info <- getUser("academyofhawaiianarts", token, userid = NULL)
app_id <- "6bc0dc1ef85743bfaa1fb26bdbb4ccc5"
app_secret <- "eac3197e22e049db8e546520207d9aa4"
token <- instaOAuth(app_id, app_secret, scope="public_content")
getFollowers("academyofhawaiianarts", token, userid = NULL, verbose = TRUE)
AHA_info <- getUser("academyofhawaiianarts", token, userid = NULL)
View(AHA_info)
AHA_media <- getUserMedia("academyofhawaiianarts", token, n=5, folder="AHA_pics")
View(AHA_media)
dir()
ls()
wd()
setwd()
curwd()
dir()
getwd()
getFollows("academyofhawaiianarts", token, verbose = TRUE)
getFollows("academyofhawaiianarts", token, userid = NULL, verbose = TRUE)
getFollowers("academyofhawaiianarts", token, userid = NULL, verbose = TRUE)
getLikes(1167756805067049168_500716089, token, verbose = TRUE)
getLikes("1167756805067049168_500716089", token, verbose = TRUE)
tsq <- searchInstagram(lat=40.7577, lng=-73.9857, distance=500,
token=token, n=500, folder="timessquare", mindate="2015-01-01", maxdate="2015-01-03")
swirl
help
help()
help(vector)
help(matrix)
demo()
demo(graphics)
demo(vector)
demo(matrix)
help(matrix)
help()
help(matrix, examples)
help(matrix)
x <- list(a = 1, b = 2, c = 3)
x$a
y <- list(4:6)
rbind(x,y)
z <- rbind(x,y)
z
y <- list(4,5,6)
y
z <- rbind(x,y)
z
str(file)
help(str)
con <- gzfile("words.gz")
x <- readLines(con, 10)
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
help(con)
head(x)
head(x)
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
View(x)
library("swirl")
ls()
ls()
swirl
swirl()
sessioninfo()
sessionInfo(
)
swirl()
install.packages("swirl")
install_from_swirl("R Programming")
library("swirl")
install_from_swirl("R Programming")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Regression Models")
install_from_swirl("Statistical Inference")
swirl()
x <- list(foo = 1:4, bar = 0.6)
x
x$foo
View(x)
str(x)
x[[1]]
x[2]
x[1]
x[1][2]
x[[1],[2]]
x[[1, 2]]
x[1,2]
x
dim(x)
class(x)
str(x)
x$foo[2]
x$foo[3]
str(x$foo)
x[1]
x[1][2]
x[[1][2]]
x[[1,2]]
$foo
x$foo
x[[1]][[3]]
x[[c(1,2)]]
x[[c(1,3)]]
airquality
View(airquality)
good <- complete.cases(airquality)
View(airquality[good,])
help(complete.cases)
x[[1]][[3]]
x
x[[c(1,3)]]
x[[1,3)]]
x[[1,3]]
x[[(1,3)]]
x[[c(1,3)]]
x[[1]][[3]]
x$foo[3]
x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
x
y
z <- x*y
z
x / y
x%*%y
x > 2
x
y > 2
x <- string
x <- char(string)
x <- "string"
x
for(letter in x) {
print(letter)
}
x <- c("a", "b", "c", "d")
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)) {
print(x[i])
}
for(letter in x) {
print(letter)
}
for(i in 1:4) print(x[i])
x <- "string"
for(letter in x) {
print(letter)
}
x <- c("a", "b", "c", "d")
for(letter in x) {
print(letter)
}
help(seq_along)
seq_along(x)
x
seq_len(x)
len(x)
length(x)
x <- c(1,2,3,4)
seq_len(x)
seq_along(x)
seq_along(length(x))
length(x)
seq_along(ncol(x))
ncol(x)
nrow(x)
as.matrix(x)
ncol(x)
nrow(x)
x <- as.matrix(x)
nrow(x)
seq_along(ncol(x))
seq_along(nrow(x))
seq_len(x)
seq_along(x)
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
x
help(rbinom)
demo(rbinom())
demo(rbinom)
args(lm)
help(lm)
help(mean)
formals(mean)
formals(lm)
paste(x, y, z)
paste(x)
paste(x,x, y, x, y, x, y, z)
paste(x,x, y, x, y, x, y, z, sep = "-------")
search()
z
str(z)
class(z)
clear()
Clear()
ClearAll()
clearAll()
ls()
swirl()
x <- as.Date("1970-01-01")
x
str(x)
class(x)
unclass(x)
x
x
unclass(x)
weekdays(x)
month(x)
months(x)
quarters(x)
Sys.time()
time <- Sys.time()
time$min
time
library(swirl)
swirl
swirl()
setwd("E:\\Brendan\\Documents\\Education\\AHA\\MusicLabel")
dir()
library("slidify", lib.loc="d:/Program Files/R/R-3.1.2/library")
library("slidifyLibraries", lib.loc="d:/Program Files/R/R-3.1.2/library")
