formals(mean)
formals(lm)
paste(x, y, z)
paste(x)
paste(x,x, y, x, y, x, y, z)
paste(x,x, y, x, y, x, y, z, sep = "-------")
search()
z
str(z)
class(z)
clear()
Clear()
ClearAll()
clearAll()
ls()
swirl()
x <- as.Date("1970-01-01")
x
str(x)
class(x)
unclass(x)
x
x
unclass(x)
weekdays(x)
month(x)
months(x)
quarters(x)
Sys.time()
time <- Sys.time()
time$min
time
library(swirl)
swirl
swirl()
setwd("E:\\Brendan\\Documents\\Education\\AHA\\MusicLabel")
print(getwd())
dir()
library(rCharts)
library(maps)
library(leaflet)
library(rMaps)
L2 <- Leaflet$new()
L2$setView(c(29.7632836,  -95.3632715), 10)
L2$tileLayer(provider = "MapQuestOpen.OSM")
L2
map <- Leaflet$new()
map$setView(c(51.505, -0.09), zoom = 13)
map$tileLayer(provider = 'Stamen.Watercolor')
map$marker(
c(51.5, -0.09),
bindPopup = 'Hi. I am a popup'
)
map
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
m = leaflet() %>%
addTiles() %>%
addMarkers(lat=39.298113, lng=-76.590248, popup="Where Brian works")
m
?data
data(quakes)
quakes
View(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
greenLeafIcon <- makeIcon(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
View(quakes)
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
## {title: Scatter Chart}
p1 <- nPlot(mpg ~ wt, group = 'cyl', data = mtcars, type = 'scatterChart')
p1$xAxis(axisLabel = 'Weight')
p1
## {title: MultiBar Chart}
hair_eye = as.data.frame(HairEyeColor)
p2 <- nPlot(Freq ~ Hair, group = 'Eye', data = subset(hair_eye, Sex == "Female"), type = 'multiBarChart')
p2$chart(color = c('brown', 'blue', '#594c26', 'green'))
p2
## {title: MultiBar Horizontal Chart}
p3 <- nPlot(~ cyl, group = 'gear', data = mtcars, type = 'multiBarHorizontalChart')
p3$chart(showControls = F)
p3
## {title: Pie Chart}
p4 <- nPlot(~ cyl, data = mtcars, type = 'pieChart')
p4
## {title: Donut Chart}
p5 <- nPlot(~ cyl, data = mtcars, type = 'pieChart')
p5$chart(donut = TRUE)
p5
## {title: Line Chart}
data(economics, package = 'ggplot2')
p6 <- nPlot(uempmed ~ date, data = economics, type = 'lineChart')
p6
## {title: Line with Focus Chart }
ecm <- reshape2::melt(economics[,c('date', 'uempmed', 'psavert')], id = 'date')
p7 <- nPlot(value ~ date, group = 'variable', data = ecm, type = 'lineWithFocusChart')
#test format dates on the xAxis
#also good test of javascript functions as parameters
#dates from R to JSON will come over as number of days since 1970-01-01
#so convert to milliseconds 86400000 in a day and then format with d3
#on lineWithFocusChart type xAxis will also set x2Axis unless it is specified
p7$xAxis( tickFormat="#!function(d) {return d3.time.format('%b %Y')(new Date( d * 86400000 ));}!#" )
#test xAxis also sets x2Axis
p7
#now test setting x2Axis to something different
#test format dates on the x2Axis
#test to show %Y format which is different than xAxis
p7$x2Axis( tickFormat="#!function(d) {return d3.time.format('%Y')(new Date( d * 86400000 ));}!#" )
p7
#test set xAxis again to make sure it does not override set x2Axis
p7$xAxis( NULL, replace = T)
p7
## {title: Stacked Area Chart}
dat <- data.frame(t=rep(0:23,each=4),var=rep(LETTERS[1:4],4),val=round(runif(4*24,0,50)))
p8 <- nPlot(val ~ t, group =  'var', data = dat, type = 'stackedAreaChart', id = 'chart')
p8
## {title: InteractiveGuidline(Multi-Tooltips) on Line}
p9 <- nPlot(value ~ date, group = 'variable', data = ecm, type = 'lineChart')
p9$xAxis( tickFormat="#!function(d) {return d3.time.format('%b %Y')(new Date( d * 86400000 ));}!#" )
#try new interactive guidelines feature
p9$chart(useInteractiveGuideline=TRUE)
p9
## {title: InteractiveGuidline(Multi-Tooltips) on Stack}
p10 <- p8
p10$chart(useInteractiveGuideline=TRUE)
p10
## {title: showDistX and showDistY}
p11 <- p1
p11$chart(showDistX = TRUE, showDistY = TRUE)
p11
## {title: multiChart}
p12 <- nPlot(value ~ date, group = 'variable', data = ecm, type = 'multiChart')
p12$params$multi = list(
uempmed = list(type="area",yAxis=1),
psavert = list(type="line",yAxis=2)
)
p12$setTemplate(script = system.file(
"/libraries/nvd3/layouts/multiChart.html",
package = "rCharts"
))
p12
## {title: Facets}
p13 <- nPlot(mpg ~ wt, data = mtcars, group = "gear", type = "scatterChart")
p13$params$facet = "cyl"
p13$templates$script = system.file(
"/libraries/nvd3/layouts/nvd3FacetPlot.html",
package = "rCharts"
)
p13
hair_eye = as.data.frame(HairEyeColor)
p14 <- nPlot(Freq ~ Hair, group = 'Sex', data = hair_eye, type = 'multiBarChart')
p14$params$facet="Eye"
p14$templates$script = system.file(
"/libraries/nvd3/layouts/nvd3FacetPlot.html",
package = "rCharts"
)
p14
p15 <- nPlot(Freq ~ Hair, group = 'Eye', data = hair_eye, type = 'multiBarChart')
p15$params$facet="Sex"
p15$templates$script = system.file(
"/libraries/nvd3/layouts/nvd3FacetPlot.html",
package = "rCharts"
)
p15
## {title: Sparklines}
p16 <- nPlot(uempmed ~ date, data = economics, type = 'sparklinePlus',height=100,width=500)
p16$chart(xTickFormat="#!function(d) {return d3.time.format('%b %Y')(new Date( d * 86400000 ));}!#")
p16
## semi replicate sparkline with a full nvd3 model by setting short height and turning off lots of things
p17 <- nPlot(
x = "date",
y = "volume",
data = spy.df,
type = "multiBarChart",
height = 200)
p17$chart(showControls = FALSE, showLegend = FALSE, showXAxis = FALSE, showYAxis = FALSE)
p17$xAxis(tickFormat =
"#!function(d) {return d3.time.format('%Y-%m-%d')(new Date(d * 24 * 60 * 60 * 1000));}!#"
)
p17
## {title: ohlcBar}
## ohlcBar not fully implemented on nvd3 side, so no axes or interactive controls
## note do not melt if using ohlcBar
require(quantmod)
spy <- getSymbols("SPY",auto.assign=FALSE,from="2013-01-01")
colnames(spy) <- c("open","high","low","close","volume","adjusted")
spy.df <- data.frame(index(spy),spy)
colnames(spy.df)[1] <- "date"
p18 <- nPlot(
x = "date",
y = "close",
data = spy.df,
type = "ohlcBar"
)
p18
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
install.packages(gmapsdistance)
install.packages(gmapsdistance)
devtools::install_github("rodazuero/gmapsdistance")
libary("gmapsdistance")
libary(gmapsdistance)
library(gmapsdistance)
gmapsdistance(origin = "Washington+DC",
destination = "New+York+City+NY",
mode = "driving")
print(getwd())
print(getwd())
gmapsdistance(origin = "Washington+DC",
destination = "New+York+City+NY",
mode = "driving")
setwd("E:\\Brendan\\Documents\\Education\\AHA\\MusicLabel")
curDir <- getwd()
fileList <- dir()
environment <- sessionInfo()
# View(curDir)
# View(fileList)
write(fileList, file = 'fileList.txt')
# writeLines(environment, con = 'environment.txt', sep = "\n", useBytes = FALSE)
writeLines(unlist(lapply(environment, paste, collapse=" ")),
con = 'environment.txt', sep = "\n", useBytes = FALSE)
setwd("E:\\Brendan\\Documents\\Education\\AHA\\MusicLabel")
curDir <- getwd()
fileList <- dir()
environment <- sessionInfo()
# View(curDir)
# View(fileList)
write(fileList, file = 'fileList.txt')
# writeLines(environment, con = 'environment.txt', sep = "\n", useBytes = FALSE)
writeLines(unlist(lapply(environment, paste, collapse=" ")),
con = 'environment.txt', sep = "\n", useBytes = FALSE)
cityData <- tbl_df(
read.xlsx2('DigitalPlatformComparison.xlsx', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character",
"character", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric")
)
)
library(plyr); library(dplyr) # order dependent for machine learning
cityData <- tbl_df(
read.xlsx2('DigitalPlatformComparison.xlsx', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character",
"character", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric")
)
)
library(xlsx)
cityData <- tbl_df(
read.xlsx2('DigitalPlatformComparison.xlsx', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character",
"character", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric")
)
)
cityData <- tbl_df(
read.xlsx2('DigitalPlatformComparison.xlsx', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character",
"character", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric")
)
cityData <- tbl_df(
read.xlsx2('DigitalPlatformComparison.xlsx', sheetIndex=2, sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character",
"character", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric")
)
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sheetIndex=2, sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character",
"character", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric")
)
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character",
"character", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric")
)
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character",
"character", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric")
)
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
citData
cityData
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character",
"character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
cityData <- tbl_df(
read.xlsx2('DigitalPlatformComparison.xlsx', sheetIndex=2, sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character","character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
cityData <- tbl_df(
read.xlsx2('DigitalPlatformComparison.xlsx', sheetIndex=2,
stringsAsFactors = FALSE,
header = TRUE, # colClasses = c("character", "character","character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
cityData <- tbl_df(
read.xlsx2('DigitalPlatformComparison.xlsx', sheetIndex=2, stringsAsFactors = FALSE,
header = TRUE, # colClasses = c("character", "character","character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
cityData
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
cityData
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
cityData
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
cityData
cityData <- cityData %>%
select(
City, State, University, Meals, Lodging, Distance, Mileage, Time,
latitude, longitude
)  %>%
mutate(
Meals = as.numeric(meals), Lodging = as.numeric(Lodging),
yaw_belt = as.numeric(yaw_belt), total_accel_belt = as.numeric(total_accel_belt),
Lodging = as.numeric(Lodging), Distance = as.numeric(Distance),
Mileage = as.numeric(Mileage), Time = as.numeric(Time),
latitude = as.numeric(latitude), longitude = as.numeric(longitude)
)
cityData <- cityData %>%
select(
City, State, Univeristy, Meals, Lodging, Distance, Mileage, Time,
latitude, longitude
)
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
cityData <- cityData %>%
select(
City, State, Univeristy, Meals, Lodging, Distance, Mileage, Time,
latitude, longitude
)
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
cityData
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
cityData <- cityData %>%
select(
City, State, Univeristy, Meals, Lodging, Distance, Mileage, Time,
latitude, longitude
)
cityData <- cityData %>%
select(
City, State, Univeristy, Meals, Lodging, Distance, Mileage, Time,
latitude, longitude
)  %>%
mutate(
Meals = as.numeric(Meals), Lodging = as.numeric(Lodging),
Lodging = as.numeric(Lodging), Distance = as.numeric(Distance),
Mileage = as.numeric(Mileage), Time = as.numeric(Time),
latitude = as.numeric(latitude), longitude = as.numeric(longitude)
)
cityData <- cityData %>%
select(
City, State, Univeristy, Meals, Lodging, Distance, Mileage, Time,
latitude, longitude
)  %>%
mutate(
Meals = as.numeric(Meals), Lodging = as.numeric(Lodging),
Lodging = as.numeric(Lodging), Distance = as.numeric(Distance),
Mileage = as.numeric(Mileage), Time = as.numeric(Time),
latitude = as.numeric(latitude), longitude = as.numeric(longitude)
)
cityData
cityData <- tbl_df(
read.csv2('DigitalPlatformComparison.csv', sep = ",",
stringsAsFactors = FALSE, na.strings = "NA",
header = TRUE, # colClasses = c("character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
)
)
cityData <- cityData %>%
select(
City, State, Univeristy, Meals, Lodging, Total, Distance, Mileage, Time,
latitude, longitude
)  %>%
mutate(
Meals = as.numeric(Meals), Lodging = as.numeric(Lodging),
Lodging = as.numeric(Lodging), Total = as.numeric(Total),
Distance = as.numeric(Distance),
Mileage = as.numeric(Mileage), Time = as.numeric(Time),
latitude = as.numeric(latitude), longitude = as.numeric(longitude)
)
cityData
cityData <- cityData %>%
select(
City, State, Univeristy, Meals, Lodging, Total, Distance, Mileage, Time,
latitude, longitude
)  %>%
mutate(
Meals = as.numeric(Meals), Lodging = as.numeric(Lodging),
Lodging = as.numeric(Lodging), Total = as.numeric(Total),
Distance = as.numeric(Distance),
Mileage = as.numeric(Mileage), Time = as.numeric(Time),
latitude = as.numeric(latitude), longitude = as.numeric(longitude)
Total = Meals + Lodging
)
cityData <- cityData %>%
select(
City, State, Univeristy, Meals, Lodging, Total, Distance, Mileage, Time,
latitude, longitude
)  %>%
mutate(
Meals = as.numeric(Meals), Lodging = as.numeric(Lodging),
Lodging = as.numeric(Lodging), Total = as.numeric(Total),
Distance = as.numeric(Distance),
Mileage = as.numeric(Mileage), Time = as.numeric(Time),
latitude = as.numeric(latitude), longitude = as.numeric(longitude),
Total = Meals + Lodging
)
cityData
install.packages(googleway)
install.packages(googleway)
install.packages("googleway")
install.packages("placement")
